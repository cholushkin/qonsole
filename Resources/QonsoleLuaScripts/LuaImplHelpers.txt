__CSCommandsRegister = 
{   
}
__CSVariablesRegister = 
{
}

local function IsEmpty(s)
  return s == nil or s == ''
end

function PrintTable(t, nestLev, maxNest)
  if t == nil then
    print("<nil>")
    return
  end
  local curIdent = ""
  for i = 1, nestLev-1  do
      curIdent = curIdent..".."
  end
  
  if nestLev == maxNest+1 then    
    print(curIdent.."<exceeds nesting>")
    return
  end  

  local cnt = 0  
  for k,v in pairs(t) do
    if type(v) == 'table' and v==t then
        print('<loop> '..k)
        goto continue
    end
    if type(v) == 'table' then
      print(curIdent..'['..k..'] = ')
      PrintTable(v, nestLev + 1, maxNest)
    else
      local str = tostring(v)
      str = str:gsub('%\n', '')
      print(curIdent..'['..k..'] = '..str)
    end
    ::continue::
    cnt = cnt + 1
  end
  
  if cnt == 0 then
     print(curIdent.."<empty>")
  end
end

function SplitString (inputstr, sep)
        if sep == nil then
                sep = "%s"
        end
        local t={}
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                table.insert(t, str)
        end
        return t
end

function PrepareCommandPath(path)
  local domains
  if type(path) == "table" then
    domains = path
  else
    assert(type(path) == "string")
    domains = SplitString(path, ".")
  end
  
  local prevTable = _G
  local curRootTable = _G
  local lastTableName = "_G"
  for i = 1, #domains do  
    local d = domains[i]
    if curRootTable[d] == nil then
      curRootTable[d] = {}    
    else
      -- reusing existing table 
      if type(curRootTable[d]) ~= "table" then
        print("Error: path conflicts with variable "..d.." of type "..type(curRootTable[d]))
        PrintTable(domains, 1, 4)
        return
      end
    end
    prevTable = curRootTable
    lastTableName = d
    curRootTable = curRootTable[d]    
  end
  return prevTable, curRootTable, lastTableName
end

function AddToCommandRegister(alias, fullName, func)
  if(__CSCommandsRegister == nil) then
    print("Error: There is no __CSCommandsRegister table avaialbe")
    return
  end
  
  if IsEmpty(alias) then
    print("Error: alias is empty")
    return
  end  
  
  if IsEmpty(fullName) then
    print("Error: fullName is empty")
    return
  end  
  
  alias = string.lower(alias)
  fullName = string.lower(fullName)
  
  -- Check for existing alias
  for k,v in pairs(__CSCommandsRegister) do
    if(string.lower(v[1]) == alias) then
      print("Error: Command with alias "..alias.." already exists. Skipping registration for command "..fullName)
      return
    end
  end
  
  -- Check for existing full path
  for k,v in pairs(__CSCommandsRegister) do
    if(string.lower(v[2]) == fullName) then
      print("Error: Command with fullName "..fullName.." already exists. Skipping registration for command "..fullName)
      return
    end
  end
  table.insert(__CSCommandsRegister, {alias, fullName, func})  
end

-- Inject getter and setter to the proxy object for a specified prop name
function InjectGetter(targetObject, propName, getterFunction)
    print('injecting getter')
    local propGetter = function(t, key)
        if(key == propName) then
            return getterFunction()
        else
            print('there is no such prop as '..key)
        end
    end
    local meta = getmetatable(targetObject)
    if meta ~= nil then
        print("reusing prev meta table")
        meta.__index = propGetter
    else
        print("set new metatable")
        setmetatable(targetObject, {__index = propGetter} )
    end
end

function InjectSetter(targetObject, propName, setterFunction)
    print('injecting setter')
    local propSetter = function(t, key, value)
                if(key == propName) then
                    setterFunction(value)
                else
                    print('there is no such prop as '..key)
                end
    end
    local meta = getmetatable(targetObject)
    if meta ~= nil then
        print("reusing prev meta table")
        meta.__newindex = propSetter
    else
        print("set new metatable")
        setmetatable(targetObject, {__newindex = propSetter} )
    end
end

function InjectMethod(parentTable, methodName, func)
    if( type(parentTable[methodName]) ~= "table" ) then
        print("Error: path conflict")
        return
    end
    if next(parentTable[methodName]) ~= nil then
        print("Error: path conflict")
        return   
    end
    -- overwrite last table with method
    parentTable[methodName] = func
end

function RegisterCommands()
    for k,v in pairs(__CSCommandsRegister) do
        print("Registering "..v[2])
        local tprev, tlast, lastName = PrepareCommandPath(v[2])        
        InjectMethod(tprev, lastName, v[3]) -- add fullnamed command
        
        print("Registering "..v[1])
        local tprev, tlast, lastName = PrepareCommandPath(v[1])        
        InjectMethod(tprev, lastName, v[3]) -- add alias command        
    end
end

-- test:
--AddToCommandRegister("Exit", "exit", function() print("Exit") end);
--AddToCommandRegister("DirLs", "system.directories.list", function() print("DirLs") end)
--AddToCommandRegister("DirCreate", "system.directories.create", function() print("DirCreate") end)
--AddToCommandRegister("DirDelete", "system.directories.delete", function() print("DirDelete") end)
--AddToCommandRegister("DirDelete", "system.directories.delete2", function() print("DirDelete2") end)
--AddToCommandRegister("aaa", "system.directories.list", function() print("DirDelete2") end)

--RegisterCommands()
--PrintTable(_G,1,1)
--[[


--PrintTable(__CSCommandsRegister, 1, 10)

-- Before the registration of global commands check if there any tables or variables
-- in _G which starts from any of Registered commands root table or alias. This is needed to 
-- prevent writing in existing global tables or variables
for k,regItem in pairs(__CSCommandsRegister) do
  -- Check alias
  if(_G[string.lower(regItem[1])] ~= nil) then 
    print("Alias conflict with core _G table - G."..string.lower(regItem[1]))
  end
  
  -- Check fullName
  local startOfFullName = SplitString(string.lower(regItem[2]), ".")[1]
  if(_G[startOfFullName] ~= nil) then 
    print("fullName conflict with core _G table - G."..startOfFullName)
  end  
end

--for k,regItem in pairs(__CSCommandsRegister) do
--  PrepareCommandPath(regItem[1])
--  PrepareCommandPath(regItem[2])
--end
PrintTable(_G, 1, 1)

--]]